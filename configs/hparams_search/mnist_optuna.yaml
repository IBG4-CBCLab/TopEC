# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/acc_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 25

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 12345
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define range of hyperparameters
    params: 
      datamodule.batch_size: choice(32, 64, 128)
      datamodule.translate_num: interval(0.01, 0.25)
      model.lr: interval(0.0001, 0.2)
      # model.net.lin1_size: choice(32, 64, 128, 256, 512)
      # model.net.lin2_size: choice(32, 64, 128, 256, 512)
      # model.net.lin3_size: choice(32, 64, 128, 256, 512)
      model.net.dropout: choice(0, 0.01, 0.1, 0.25, 0.5)
      # model.net.out_dim: choice(32, 64, 128, 256)
      # model.net.hidden_channels: choice(32, 64, 128, 256)
      # model.net.num_filters: choice(32, 64, 128, 256)
      model.net.num_layers: choice(3, 6, 9)
      model.net.num_gaussians: choice(25, 50, 100, 150)
      # datamodule.batch_size: 
      #   type: categorical
      #   choices: [32, 64, 128]
      # datamodule.translate_num: 
      #   type: float
      #   low: 0.01
      #   high: 0.25
      # model.lr: 
      #   type: float
      #   low: 0.0001
      #   high: 0.2
      # model.net.lin1_size: 
      #   type: categorical
      #   choices: [32, 64, 128, 256, 512] 
      # model.net.lin2_size: 
      #   type: categorical
      #   choices: [32, 64, 128, 256, 512]
      # model.net.lin3_size: 
      #   type: categorical
      #   choices: [32, 64, 128, 256, 512]
      # model.net.dropout: 
      #   type: categorical
      #   choices: [0, 0.01, 0.1, 0.25, 0.5]
      # model.net.out_dim: 
      #   type: categorical
      #   choices: [32, 64, 128, 256]
      # model.net.hidden_channels: 
      #   type: categorical
      #   choices: [32, 64, 128, 256]
      # model.net.num_filters: 
      #   type: categorical
      #   choices: [32, 64, 128, 256]
      # model.net.num_layers: 
      #   type: categorical
      #   choices: [3, 6, 9]
      # model.net.num_gaussians: 
      #   type: categorical
      #   choices: [25, 50, 100, 150]